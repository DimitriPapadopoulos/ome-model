{% def indexes_string(indexes) %}${", ".join(indexes)}{% end %}\
\
{% def index_name_string(name) %}\
{% choose %}\
{% when name[:2].isupper()%}${name}Index{% end %}\
{% otherwise %}${name[:1].lower()}${name[1:]}Index{% end %}\
{% end %}\
{% end %}\
\
{% def index_string(name) %}int ${index_name_string(name)}{% end %}\
\
{% def counter(parent, obj, indexes) %}\
	public int get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}Count(${indexes_string(indexes[:-1])})
	{
		// Parents: ${repr(parents[obj.name])}
{% if obj.isReference %}\
		// ${obj.name} is a reference
		return root.${".".join(accessor(obj.name, parent, obj.name)[:-1] + ["sizeOfLinked%sList()" % obj.name.replace('Ref', '')])};
{% end %}\
{% if not obj.isReference %}\
		// ${obj.name} is not a reference
		return root.${".".join(accessor(obj.name, parent, obj.name)[:-1] + ["sizeOf%sList()" % obj.name.replace('Ref', '')])};
{% end %}\
	}
{% end %}\
\
{% def getter(parent, obj, prop, indexes) %}\
{% choose %}\
{% when len(indexes) > 0 and prop.maxOccurs > 1 %}\
	public ${prop.metadataStoreType} get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${indexes_string(indexes)}, ${index_string(prop.name)})
{% end %}\
{% when len(indexes) > 0 %}\
	public ${prop.metadataStoreType} get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${indexes_string(indexes)})
{% end %}\
{% otherwise %}\
	public ${prop.metadataStoreType} get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${index_string(prop.name)})
{% end %}\
{% end %}\
	{
		// Parents: ${repr(parents[obj.name])}
{% choose %}\
{% when is_abstract(parent) and prop.isReference %}\
		// ${parent} is abstract proprietary
		${obj.name} o = (${obj.name}) root.${".".join(accessor(obj.name, parent, prop)[:-1])};
		return o.getLinked${prop.javaMethodName}().getID();
{% end %}\
{% when is_abstract(parent) %}\
		// ${parent} is abstract proprietary and not a reference
		${obj.name} o = (${obj.name}) root.${".".join(accessor(obj.name, parent, prop)[:-1])};
		return o.get${prop.javaMethodName}();
{% end %}\
{% when prop.isReference and prop.maxOccurs > 1 %}\
		// ${prop.name} is reference and occurs more than once
		return root.${".".join(accessor(obj.name, parent, prop))}.getLinked${prop.javaMethodName}(${index_name_string(prop.name)}).getID();
{% end %}\
{% when prop.isReference %}\
		// ${prop.name} is reference and occurs only once
		return root.${".".join(accessor(obj.name, parent, prop))}.getLinked${prop.javaMethodName}().getID();
{% end %}\
{% otherwise %}\
		// ${prop.name} is not a reference
		return root.${".".join(accessor(obj.name, parent, prop))}.get${prop.javaMethodName}();
{% end %}\
{% end %}\
	}
{% end %}\
\
{% def setter(parent, obj, prop, indexes) %}\
{% choose %}\
{% when len(indexes) > 0 and prop.maxOccurs > 1 %}\
	public void set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreType} ${prop.javaArgumentName}, ${indexes_string(indexes)}, ${index_string(prop.name)})
{% end %}\
{% when len(indexes) > 0 %}\
	public void set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreType} ${prop.javaArgumentName}, ${indexes_string(indexes)})
{% end %}\
{% otherwise %}\
	public void set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreType} ${prop.javaArgumentName})
{% end %}\
{% end %}\
	{
		// Parents: ${repr(parents[obj.name])}
{% choose %}\
{% when is_abstract(parent) and prop.isReference %}\
		// ${prop.name} is abstract proprietary and is a reference
		${prop.name} ${prop.javaInstanceVariableName}_reference = new ${prop.name}();
		${prop.javaInstanceVariableName}_reference.setID(${prop.javaArgumentName});
		model.addReference(
				root.${".".join(accessor(obj.name, parent, prop)[:-1])},
				${prop.javaInstanceVariableName}_reference);
		// ${parent} is abstract proprietary
{% end %}\
{% when is_abstract(parent) %}\
		// ${parent} is abstract proprietary and not a reference
		OME o0 = root;
{% for i, v in enumerate(accessor(obj.name, parent, prop, accessor_string_complex)[:-1]) %}\
{% choose %}\
{% when v['level'] == 2 %}\
		if (o${i}.sizeOf${v['name']}List() == ${index_name_string(v['name'])})
		{
			o${i}.add${v['name']}(new ${obj.name}());
		}
{% end %}\
{% when v['max_occurs'] > 1 %}\
		if (o${i}.sizeOf${v['name']}List() == ${index_name_string(v['name'])})
		{
			o${i}.add${v['name']}(new ${v['name']}());
		}
{% end %}\
{% when v['max_occurs'] == 1 %}\
		if (o${i}.${v['accessor']} == null)
		{
			o${i}.set${v['name']}(new ${v['name']}());
		}
{% end %}\
{% end %}\
		${v['name']} o${i + 1} = o${i}.${v['accessor']};
{% if v['level'] == 2 %}\
{% if "ID" == prop.name %}\
		model.addModelObject(${prop.javaArgumentName}, o${i + 1});
{% end %}\
		((${obj.name})o${i + 1}).set${prop.javaMethodName}(${prop.javaArgumentName});
{% end %}\
{% end %}\
{% end %}\
{% when prop.isReference %}\
		// ${prop.name} is reference and occurs more than once
		${prop.name} ${prop.javaInstanceVariableName}_reference = new ${prop.name}();
		${prop.javaInstanceVariableName}_reference.setID(${prop.javaArgumentName});
		model.addReference(
				root.${".".join(accessor(obj.name, parent, prop))},
				${prop.javaInstanceVariableName}_reference);
{% end %}\
{% otherwise %}\
		// ${prop.name} is not a reference
		OME o0 = root;
{% for i, v in enumerate(accessor(obj.name, parent, prop, accessor_string_complex)) %}\
{% choose %}\
{% when v['max_occurs'] > 1 %}\
		if (o${i}.sizeOf${v['name']}List() == ${index_name_string(v['name'])})
		{
			o${i}.add${v['name']}(new ${v['name']}());
		}
{% end %}\
{% when v['max_occurs'] == 1 %}\
		if (o${i}.${v['accessor']} == null)
		{
			o${i}.set${v['name']}(new ${v['name']}());
		}
{% end %}\
{% end %}\
		${v['name']} o${i + 1} = o${i}.${v['accessor']};
{% if v['level'] == 1 %}\
{% if "ID" == prop.name %}\
		model.addModelObject(${prop.javaArgumentName}, o${i + 1});
{% end %}\
		o${i + 1}.set${prop.javaMethodName}(${prop.javaArgumentName});
{% end %}\
{% end %}\
{% end %}\
{% end %}\
	}
{% end %}\
\
{% python
	def parent_object(name):
		return model.getObjectByName(parents[name].keys()[0])

	def is_abstract(name):
		o = model.getObjectByName(name)
		if o is not None and \
		   (o.isAbstract or o.isAbstractProprietary):
			return True
		return False

	def is_parent_abstract(name):
		parent = parent_object(name)
		if parent is not None and \
		   (parent.isAbstract or parent.isAbstractProprietary):
			return True
		return False

	def sorted_properties(o):
		return sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name))

	def accessor_string(name, max_occurs, level):
		"""Makes a Java method accessor string from an index name."""
		return accessor_string_complex(name, max_occurs, level)['accessor']

	def accessor_string_complex(name, max_occurs, level):
		"""Makes a Java method accessor string from an index name."""
		to_return = {'level': level, 'name': name, 'max_occurs': max_occurs}
		if max_occurs == 1:
			to_return['accessor'] = "get%s()" % (name)
			return to_return
		if name[:2].isupper():
			to_return['accessor'] = "get%s(%sIndex)" % (name, name)
			return to_return
		to_return['accessor'] = "get%s(%s%sIndex)" % (name, name[:1].lower(), name[1:])
		return to_return

	def accessor(name, parent, prop, func=accessor_string):
		results = dict()
		fu.resolve_hierarchy(results, model, {name: parents[name]}, func, min_occurs=1)
		if parent not in results.keys():
			raise Exception("Invalid KEY No accessor for: name:%s parent:%s prop:%s === %s" % (name, parent, prop, results))
		if len(results.keys()) == 0:
			raise Exception("Zero KEYS No accessor for: name:%s parent:%s prop:%s === %s" % (name, parent, prop, results))
		return results[parent]
%}
\
\
/*
 * loci.formats.meta.OMEXMLMetadataImpl
 *
 *-----------------------------------------------------------------------------
 *
 *  Copyright (C) 2005-@year@ Open Microscopy Environment
 *      Massachusetts Institute of Technology,
 *      National Institutes of Health,
 *      University of Dundee,
 *      University of Wisconsin-Madison
 *
 *
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 2.1 of the License, or (at your option) any later version.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *-----------------------------------------------------------------------------
 */

/*-----------------------------------------------------------------------------
 *
 * THIS IS AUTOMATICALLY GENERATED CODE.  DO NOT MODIFY.
 * Created by ${fu.user} via xsd-fu on ${fu.date}
 *
 *-----------------------------------------------------------------------------
 */

// TODO: TEMPORARY, WILL NOT BE USED AFTER TESTING IS COMPLETE
package ome.xml;

import ome.xml.r201004.*;
import ome.xml.r201004.enums.*;
import ome.xml.r201004.primitives.*;

/**
 * A metadata store implementation for constructing and manipulating OME-XML
 * DOMs for the 2010-04 version of OME-XML. It requires the
 * ome.xml.r201004 package to compile (part of ome-xml.jar).
 *
 * <dl><dt><b>Source code:</b></dt>
 * <dd><a href="https://skyking.microscopy.wisc.edu/trac/java/browser/trunk/components/bio-formats/src/loci/formats/ome/OMEXML200809Metadata.java">Trac</a>,
 * <a href="https://skyking.microscopy.wisc.edu/svn/java/trunk/components/bio-formats/src/loci/formats/ome/OMEXML200809Metadata.java">SVN</a></dd></dl>
 *
 * @author Curtis Rueden ctrueden at wisc.edu
 * @author Melissa Linkert linkert at wisc.edu
 */
public class OMEXMLMetadataImpl implements MetadataStore, MetadataRetrieve
{
	private OME root;

	private OMEModel model;

	private String uuid;

	public void createRoot()
	{
		root = new OME();
		model = new OMEModelImpl();
	}

	public Object getRoot()
	{
		return root;
	}

	public void setRoot(Object root)
	{
		if (!(root instanceof OME))
		{
			throw new IllegalArgumentException(
					"Expecting OME class or subclass.");
		}
		this.root = (OME) root;
		model = new OMEModelImpl();
	}

	public int resolveReferences()
	{
		return model.resolveReferences();
	}

	// -- Entity counting --

{% for o in sorted(model.objects.values(), lambda x, y: cmp(x.name, y.name)) %}\
{% if o.name not in fu.METADATA_OBJECT_IGNORE %}\
{% if parents[o.name] is not None and not o.isAbstract %}\
	// ${o.name} entity counting
{% for k, v in indexes[o.name].items() %}\
{% if fu.max_occurs_under_parent(model, k, o.name) > 1 %}\
${counter(k, o, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\

	// -- Entity retrieval --

	/** Gets the UUID associated with this collection of metadata. */
	public String getUUID()
	{
		return uuid;
	}

{% for o in sorted(model.objects.values(), lambda x, y: cmp(x.name, y.name)) %}\
{% if o.name not in fu.METADATA_OBJECT_IGNORE %}\
{% if parents[o.name] is not None and not o.isAbstract and not o.isAbstractProprietary %}\
	//
	// ${o.name} property storage
	//
	// Indexes: ${repr(indexes[o.name])}
	// ${repr(parents[o.name])}
	// Is multi path? ${is_multi_path[o.name]}

{% choose %}\
{% when o.isReference %}\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
	// ${prop.minOccurs}:${prop.maxOccurs}
	// Is multi path? ${is_multi_path[o.name]}
	// Ignoring ${prop.name} property of reference ${o.name}

{% end %}\
{% end %}\
{% otherwise %}\
\
{% for k, v in indexes[o.name].items() %}\
{% if is_abstract(k) %}\
{% for prop in sorted_properties(model.getObjectByName(k)) %}\
{% choose %}\
{% when not prop.isPrimitive %}\
	// Ignoring ${prop.name} of parent abstract type
{% end %}\
{% otherwise %}\
{% for parent_k, parent_v in indexes[k].items() %}\
	// ${prop.name} accessor from parent ${k}
${getter(k, o, prop, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
{% choose %}\
{% when prop.isBackReference %}\
	// Ignoring ${prop.name} back reference
{% end %}\
{% when not prop.isReference and not prop.isAttribute and prop.isComplex() %}\
	// Ignoring ${prop.name} element, complex property
{% end %}\
{% otherwise %}\
{% for k, v in indexes[o.name].items() %}\
${getter(k, o, prop, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\

	// - Entity storage -

	/** Sets the UUID associated with this collection of metadata. */
	public void setUUID(String uuid)
	{
		this.uuid = uuid;
	}

{% for o in sorted(model.objects.values(), lambda x, y: cmp(x.name, y.name)) %}\
{% if o.name not in fu.METADATA_OBJECT_IGNORE %}\
{% if parents[o.name] is not None and not o.isAbstract and not o.isAbstractProprietary %}\
	//
	// ${o.name} property storage
	//
	// ${repr(parents[o.name])}
	// Is multi path? ${is_multi_path[o.name]}

{% choose %}\
{% when o.isReference %}\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
	// ${prop.minOccurs}:${prop.maxOccurs}
	// Is multi path? ${is_multi_path[o.name]}
	// Ignoring ${prop.name} property of reference ${o.name}

{% end %}\
{% end %}\
{% otherwise %}\
\
{% for k, v in indexes[o.name].items() %}\
{% if is_abstract(k) %}\
{% for prop in sorted_properties(model.getObjectByName(k)) %}\
{% choose %}\
{% when not prop.isPrimitive %}\
	// Ignoring ${prop.name} of parent abstract type
{% end %}\
{% otherwise %}\
{% for parent_k, parent_v in indexes[k].items() %}\
	// ${prop.name} accessor from parent ${k}
${setter(k, o, prop, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
{% choose %}\
{% when prop.isBackReference %}\
	// Ignoring ${prop.name} back reference
{% end %}\
{% when not prop.isReference and not prop.isAttribute and prop.isComplex() %}\
	// Ignoring ${prop.name} element, complex property
{% end %}\
{% otherwise %}\
{% for k, v in indexes[o.name].items() %}\
${setter(k, o, prop, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
}
