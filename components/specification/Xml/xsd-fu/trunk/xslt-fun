#!/usr/bin/env python
# encoding: utf-8
"""
...
"""

#  
#  Copyright (c) 2009 University of Dundee. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
#  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
#  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
#  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#  SUCH DAMAGE.

import unittest
import sys

from StringIO import StringIO
from getopt import getopt, GetoptError

# We're using lxml's ElementTree implementation for XML manipulation due to
# its XSLT integration.
from lxml.etree import XML, XSLT, Element, SubElement, ElementTree, dump, parse

# Handle Python 2.5 built-in ElementTree
#try:
#        from xml.etree.ElementTree import XML, Element, SubElement, ElementTree, dump
#except ImportError:
#        from elementtree.ElementTree import XML, Element, SubElement, ElementTree, dump


def usage(error):
    """Prints usage so that we don't have to. :)"""
    cmd = sys.argv[0]
    print """%s
Usage: %s <stylesheet.xsl> <input.xml> [output.xml]
Runs the stylesheet transform upon an XML instance document.

Options:

Examples:
  %s foo.xslt bar.xml bar_new.xml

Report bugs to ome-devel@lists.openmicroscopy.org.uk""" % (error, cmd, cmd)
    sys.exit(2)

def run_stylesheet(xslt, document):
    xslt_doc = parse(xslt)
    transform = XSLT(xslt_doc)
    return transform(document)


class Test200809(unittest.TestCase):
    STYLESHEET = "2008-09.xsl"
    
    DOCUMENT = "tmp/sample-2008-09.ome"
    
    OLD_OME_NS = "http://www.openmicroscopy.org/Schemas/OME/2008-09"

    OLD_SPW_NS = "http://www.openmicroscopy.org/Schemas/SPW/2008-09"
    
    NEW_OME_NS = "http://www.openmicroscopy.org/Schemas/OME/2009-09"

    NEW_SPW_NS = "http://www.openmicroscopy.org/Schemas/SPW/2009-09"

    def setUp(self):
        self.xslt_file = open(self.STYLESHEET)
        self.instance_file = open(self.DOCUMENT)
        self.instance_document = parse(self.instance_file)
        self.result = run_stylesheet(self.xslt_file, self.instance_document)
        self.old_root = self.instance_document.getroot()
        self.new_root = self.result.getroot()

    def tearDown(self):
        self.xslt_file.close()
        self.instance_file.close()

    def test_objective_settings(self):
        xpath = './/{%s}ObjectiveRef' % self.OLD_OME_NS
        reference_count = len(self.old_root.findall(xpath))
        self.assertTrue(reference_count > 0)
        xpath = './/{%s}ObjectiveRef' % self.NEW_OME_NS
        old_elements = self.new_root.findall(xpath)
        xpath = './/{%s}ObjectiveSettings' % self.NEW_OME_NS
        new_elements = self.new_root.findall(xpath)
        self.assertEquals(reference_count, len(new_elements))
        self.assertEquals(0, len(old_elements))

    def test_light_source_settings(self):
        xpath = './/{%s}LightSourceRef' % self.OLD_OME_NS
        reference_count = len(self.old_root.findall(xpath))
        self.assertTrue(reference_count > 0)
        xpath = './/{%s}LightSourceRef' % self.NEW_OME_NS
        old_elements = self.new_root.findall(xpath)
        xpath = './/{%s}LightSettings' % self.NEW_OME_NS
        new_elements = self.new_root.findall(xpath)
        self.assertEquals(reference_count, len(new_elements))
        self.assertEquals(0, len(old_elements))

    def test_detector_settings(self):
        xpath = './/{%s}DetectorRef' % self.OLD_OME_NS
        reference_count = len(self.old_root.findall(xpath))
        self.assertTrue(reference_count > 0)
        xpath = './/{%s}DetectorRef' % self.NEW_OME_NS
        old_elements = self.new_root.findall(xpath)
        xpath = './/{%s}DetectorSettings' % self.NEW_OME_NS
        new_elements = self.new_root.findall(xpath)
        self.assertEquals(reference_count, len(new_elements))
        self.assertEquals(0, len(old_elements))

    def test_description_no_lang(self):
        print self.result
        xpath = './/{%s}Description' % self.OLD_OME_NS
        reference_count_all = len(self.old_root.findall(xpath))
        self.assertTrue(reference_count_all > 0)
        xpath = './/{%s}Screen/{%s}Description' % (self.OLD_SPW_NS, self.OLD_OME_NS)
        reference_screen_descripton_elements = self.new_root.findall(xpath)
        xpath = './/{%s}Description' % self.NEW_OME_NS
        new_ome_descripton_elements = self.new_root.findall(xpath)
        xpath = './/{%s}Screen/{%s}Description' % (self.NEW_SPW_NS, self.NEW_SPW_NS)
        new_screen_descripton_elements = self.new_root.findall(xpath)
        self.assertEquals(reference_count_all, len(new_ome_descripton_elements)+len(new_screen_descripton_elements))
        self.assertEquals(len(reference_screen_descripton_elements),len(new_screen_descripton_elements))
        

        xpath = './/{%s}Description' % self.NEW_OME_NS
        new_elements = self.new_root.findall(xpath)
        for element in new_elements:
            self.assertFalse('lang' in element.keys())

    def test_dataset_no_locked(self):
        xpath = './/{%s}Dataset' % self.OLD_OME_NS
        reference_count = len(self.old_root.findall(xpath))
        self.assertTrue(reference_count > 0)
        xpath = './/{%s}Dataset' % self.NEW_OME_NS
        new_elements = self.new_root.findall(xpath)
        self.assertEquals(reference_count, len(new_elements))
        for element in new_elements:
            self.assertFalse('Locked' in element.keys())

    def test_objective_elements_to_attributes(self):
        xpath = './/{%s}Objective' % self.OLD_OME_NS
        old_elements = self.old_root.findall(xpath)
        reference_count = len(old_elements)
        self.assertTrue(reference_count > 0)
        xpath = './/{%s}Objective' % self.NEW_OME_NS
        new_elements = self.new_root.findall(xpath)
        self.assertEquals(reference_count, len(new_elements))
        for i, element in enumerate(new_elements):
            self.assertEquals(0, len(element.getchildren()))
            old_element = old_elements[i]
            for child in old_element.getchildren():
                name = child.tag[child.tag.find("}") + 1:]
                self.assertEquals(element.get(name), child.text)

    def test_experimenter_elements_to_attributes(self):
        xpath = './/{%s}Experimenter' % self.OLD_OME_NS
        old_elements = self.old_root.findall(xpath)
        reference_count = len(old_elements)
        self.assertTrue(reference_count > 0)
        xpath = './/{%s}Experimenter' % self.NEW_OME_NS
        new_elements = self.new_root.findall(xpath) 
        self.assertEquals(reference_count, len(new_elements))

        for i, element in enumerate(new_elements):
            old_element = old_elements[i]
            xpath = './{%s}GroupRef' % self.OLD_OME_NS
            xpath_new = './{%s}GroupRef' % self.NEW_OME_NS
            group_ref_count_old = len(old_element.findall(xpath))
            group_ref_count_new = len(element.findall(xpath_new))
            self.assertEquals(group_ref_count_new, group_ref_count_old)
            xpath_omename = './{%s}OMEName' % self.OLD_OME_NS
            self.assertEquals(element.get('UserName'),
                              old_element.findtext(xpath_omename)) 
            for child in old_element.getchildren():
                name = child.tag[child.tag.find("}") + 1:]
                if name in ['GroupRef', 'OMEName']:
                    continue
                self.assertEquals(element.get(name), child.text)
    
    def test_filter_set_elements_to_attributes(self):
        xpath = './/{%s}FilterSet' % self.OLD_OME_NS
        old_elements = self.old_root.findall(xpath)
        reference_count = len(old_elements)
        xpath = './/{%s}FilterSet' % self.NEW_OME_NS
        new_elements = self.new_root.findall(xpath) 
        self.assertEquals(reference_count, len(new_elements))

        for i, element in enumerate(new_elements):
            old_element = old_elements[i]
            self.assertEquals(3, len(element.getchildren()))
            self.assertEquals(len(old_element.keys())-3, len(element.keys()))
            self.assertFalse('EmFilterRef' in element.keys())
            self.assertFalse('ExFilterRef' in element.keys())
            self.assertFalse('DichroicRef' in element.keys())
            
            xpath_filter = './{%s}EmissionFilterRef' % self.NEW_OME_NS
            self.assertEquals(old_element.get('EmFilterRef'),
                              element.findtext(xpath_filter)) 
                       
            xpath_filter = './{%s}ExcitationFilterRef' % self.NEW_OME_NS
            self.assertEquals(old_element.get('ExFilterRef'),
                              element.findtext(xpath_filter)) 
            xpath_filter = './{%s}DichroicRef' % self.NEW_OME_NS
            self.assertEquals(old_element.get('DichroicRef'),
                              element.findtext(xpath_filter))       
                                          
            for key in old_element.keys():
                if key in ['EmFilterRef', 'ExFilterRef', 'DichroicRef']:
                    continue
                self.assertEquals(element.get(key), old_element.get(key))
                
    def test_plane_elements_to_attributes(self):
        xpath = './/{%s}Plane' % self.OLD_OME_NS
        old_elements = self.old_root.findall(xpath)
        reference_count = len(old_elements)
        xpath = './/{%s}Plane' % self.NEW_OME_NS
        new_elements = self.new_root.findall(xpath) 
        self.assertEquals(reference_count, len(new_elements))  
        
        for i, element in enumerate(new_elements):
            old_element = old_elements[i]
            xpath_name = './{%s}PlaneTiming' % self.OLD_OME_NS
            pt = old_element.find(xpath_name)
            pt_count = len(pt.keys())
            
            for key in pt.keys():
                self.assertTrue(key in element.keys())
                self.assertEquals(element.get(key), pt.get(key))
            
            xpath_name = './{%s}StagePosition' % self.OLD_OME_NS
            sp = old_element.find(xpath_name)
            sp_count = len(sp.keys())
            for key in sp.keys():
                self.assertTrue(key in element.keys())
                self.assertEquals(element.get(key), sp.get(key))
                
            self.assertEquals(len(old_element.keys())+pt_count+sp_count, len(element.keys()))  
    
    def test_pixels_attributes_name_changed(self):
        xpath = './/{%s}Pixels' % self.OLD_OME_NS
        old_elements = self.old_root.findall(xpath)
        reference_count = len(old_elements)
        xpath = './/{%s}Pixels' % self.NEW_OME_NS
        new_elements = self.new_root.findall(xpath) 
        self.assertEquals(reference_count, len(new_elements))     
        
        for i, element in enumerate(new_elements):
            old_element = old_elements[i]
            self.assertEquals(len(old_element.getchildren()), len(element.getchildren())) 
            self.assertEquals(len(old_element.keys()), len(element.keys()))  
            for key in old_element.keys():
                if key in ['PixelType']:
                    self.assertEquals(element.get('Type'), old_element.get(key))
                else:
                    self.assertEquals(element.get(key), old_element.get(key))
                  
if __name__ == '__main__':
    unittest.main()
"""
    try:
        options, args = getopt(sys.argv[1:], "")
    except GetoptError, (msg, opt):
        usage(msg)

    for option, argument in options:
        pass

    xslt_filename = "2008-09.xsl"
    xslt = open(xslt_filename)
    in_filename = "tmp/sample-lsm-nobindata.ome"
    in_file = open(in_filename)
    try:
        print "Running XSLT %s on %s..." % (xslt_filename, in_filename)
        run_stylesheet(xslt, in_file, None)
    finally:
        xslt.close()
        in_file.close()
"""